<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (live_call()) return live_result;
enum game_state {
  selecting_deck = 0,
  deck_selected= 1,
  battling = 2
}
current_state = game_state.selecting_deck;

max_energy = 3;
player_energy = max_energy;
max_hp = 100;
current_hp = max_hp;

current_shield = 0;

current_enemy = -1;
current_turn = 0;
start_player_turn = false;

current_hand = ds_list_create();
current_pile = ds_list_create();

player_cards = ds_list_create();
deck_choices = pack(
  pack("Spawn Minions", "Spawn Bear", "Gain Energy"),
  pack("Healing Ward", "Blast Minions", "Shield"),
  pack("Block Damage", "Do Damage", "Counter Spell"),
  pack("Spawn Minions", "Shield", "Healing Ward"),
  pack("Do Damage", "Spawn Bear", "Gain Energy"),
  pack("Stun Target", "Immunity Aura", "Poison Target"),
  pack("Do Damage", "Block Damage", "Spawn Minions")
);

enemy_minions = ds_list_create();
friendly_minions = ds_list_create();

num_enemy_minions = 0;
enemy_minion_spots = pack(
  pack(200, 150),
  pack(300, 150),
  pack(400, 150),
  pack(500, 150),
  pack(600, 150),
  pack(700, 150)
);
num_friendly_minions = 0;
friendly_minion_spots = pack(
  pack(200, 450),
  pack(300, 450),
  pack(400, 450),
  pack(500, 450),
  pack(600, 450),
  pack(700, 450)
);</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//reset the position of hand
instance_create(x,y,o_end_turn_button);
var q = 0;
for(q=0;q&lt;ds_list_size(current_hand);q++) {
  var t_obj = ds_list_find_value(current_hand, q);
  t_obj.x = (room_width/2-250)+(q*155);
  t_obj.y = room_height-200;
}
scr_ensure_hand_is_full();
player_energy = max_energy;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (live_call()) return live_result;
if(!is_enemy_turn &amp;&amp; !start_player_turn) {
  start_player_turn = true;
  alarm[0] = 60;
  //scr_ensure_hand_is_full();
}
if(is_enemy_turn &amp;&amp; start_player_turn) {
  start_player_turn = false;
}
/*if(keyboard_check_pressed(ord("R"))) {*/
  /*room_restart();*/
/*}*/</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (live_call()) return live_result;
draw_set_font(f_default);
draw_set_color(c_white);
draw_set_halign(fa_left);
if(current_state == game_state.battling) {
  if(is_enemy_turn) {
    draw_text(0, room_height-45, "ENEMYS TURN");
  } else {
    draw_text(0, room_height-45, "YOUR TURN");
  }
}

switch(current_state) {
  case game_state.selecting_deck:
    draw_text(0,20, "SELECTING DECK");
    break;
  case game_state.deck_selected:
    draw_text(0,20, "TAKE A LOOK AT THAT DECK");
    break;
  case game_state.battling:
    var selected_color = c_purple;
    draw_rectangle_colour(0, 0, room_width, 50, selected_color, selected_color, selected_color, selected_color, false);
    draw_set_color(c_white);
    draw_text(15, 15, "LIFE: 120/120");
    draw_text(155, 15, "SHIELD: "+string(current_shield));

    draw_text(room_width-200, 15, "TURN ENERGY: "+string(player_energy)+"/"+string(max_energy));
    //also draw the current stack of cards
    draw_sprite(s_card_back, 0, room_width-185, room_height-270);
    draw_set_color(c_white);
    draw_set_font(f_card_left_display);
    draw_text(room_width-132, room_height-190, string(ds_list_size(current_pile)));
    draw_set_font(f_default);
    // XXX: DEBUG?
    if(true) {
      draw_set_color(c_blue);
      draw_text(0, room_height-75, "Player Turn Start: "+string(start_player_turn));
    }
  default: break;
}
if(true) {
  draw_set_color(c_white);
  draw_text(0,100, "MOUSE (X,Y): ("+string(mouse_x)+","+string(mouse_y)+")");
  draw_text(0,130, "HAND SIZE: "+string(ds_list_size(current_hand)));
  draw_text(0,160, "PILE SIZE: "+string(ds_list_size(current_pile)));
  draw_text(0,190, "ENEMY MINIONS: "+string(ds_list_size(enemy_minions)));
  draw_text(0,210, "FRIENDLY MINIONS: "+string(ds_list_size(friendly_minions)));
}


/*if(current_state == game_state.selecting_deck) {*/
  /*draw_text(0,20, "SELECTING DECK");*/
/*}*/</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
