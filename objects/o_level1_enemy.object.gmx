<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (live_call()) return live_result;
deck = ds_list_create();
ds_list_add(deck, "Spawn Minions", "Spawn Minions", "Shield", "Spawn Bear", "Spawn Minions", "Do Damage", "Do Damage", "Do Damage");
// using to test do damage displays
/*ds_list_add(deck, "Do Damage", "Do Damage", "Do Damage", "Do Damage", "Spawn Minions", "Do Damage", "Do Damage", "Do Damage");*/
original_deck = ds_list_create();
ds_list_copy(original_deck, deck);
hand = ds_list_create();
priority_cards = pack("Spawn Minions", "Do Damage", "Spawn Bear");
play_delay = false;

TURN_MOVE_SPEED = 20;

//scr_pick_hand
var i = 0;
for(i=0;i&lt;3;i++) {
  var m = irandom_range(0, ds_list_size(deck)-1);
  ds_list_add(hand, ds_list_find_value(deck, m));
  ds_list_delete(deck, m);
}

turn_triggered = false;
ending_turn = false;
enemy_hand = pack("Shield", "Spawn Minions", "Spawn Bear", "Shield");
max_hp = 50;
current_hp = max_hp;
current_shield = 0;
poisoned = false;
selected_card = "NOT SET HOLMES";</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>scr_enemy_play_card(selected_card);
alarm[1] = 30;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ALARM2 CODE
turn_triggered = true;
alarm[0] = TURN_MOVE_SPEED;
scr_reorganize_enemy_minions();
/*show_message("should reorganize minions");*/</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///ALARM1 CODE
ending_turn = true;
scr_end_turn();
turn_triggered = false;</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*show_message("alarm 0 envoked");*/
// XXX: should be revisted to select the best card for the play / follow a script
//scr_choose_card
//check from priority list first
var i = 0;
var found = false;
for(i=0;i&lt;ds_list_size(hand);i++) {
  if(!found) {
    var m =0;
    m = ds_list_find_value(hand, i);
    var q = 0;
    for(q=0;q&lt;array_length_1d(priority_cards);q++) {
      if(priority_cards[q] == m) {
        found = true;
      }
    }
  }
  if(found) {
    // new hot way
    scr_display_enemy_card_play(m);
    selected_card = m;
    alarm[3] = 20;

    // old way of doing things
    /*scr_enemy_play_card(m);*/
    /*alarm[1] = 30;*/



    /*show_message("starting alarm to end turn");*/
    /*scr_end_turn();*/
    // hope we dont need this
    /*ds_list_delete(hand, m);*/
    // also add a card to the hand after
    if(ds_list_size(deck) &gt; 0 ) {
      var m = irandom_range(0, ds_list_size(deck)-1);
      ds_list_add(hand, ds_list_find_value(deck, m));
      ds_list_delete(deck, m);
    } else {
      /*show_message("need to reshuffle");*/
      // scr_reshuffle_enemy_deck
      var m = ds_list_create();
      ds_list_copy(m, original_deck);

      while(ds_list_size(m) &gt; 0) {
        var random_selction = irandom_range(0, ds_list_size(m)-1);
        var q = 0;
        q = ds_list_find_value(m, random_selction);
        ds_list_add(deck, q);
        ds_list_delete(m, random_selction);
      }
      /*show_message("done reshuffling");*/
    }
    return 1;
  }
}
// worst case we are random selecting... not the best but the worst
var m = irandom_range(0, 2);
var k = ds_list_find_value(hand, m);
/*show_message(k);*/

selected_card = k;
scr_display_enemy_card_play(k);
alarm[3] = 20;

// keeping around in case the above doesnt work
/*scr_enemy_play_card(k);*/
/*alarm[1] = 30;*/


/*show_message("starting alarm to end turn");*/
// hope we dont need this
/*ds_list_delete(hand, m);*/
// also add a card to the hand after
if(ds_list_size(deck) &gt; 0 ) {
  var m = irandom_range(0, ds_list_size(deck)-1);
  ds_list_add(hand, ds_list_find_value(deck, m));
  ds_list_delete(deck, m);
} else {
  var m = ds_list_create();
  ds_list_copy(m, original_deck);

  while(ds_list_size(m) &gt; 0) {
    var random_selction = irandom_range(0, ds_list_size(m)-1);
    var q = 0;
    q = ds_list_find_value(m, random_selction);
    ds_list_add(deck, q);
    ds_list_delete(m, random_selction);
  }
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(current_hp &lt;= 0) {
  show_message("killed enemy");
  room_goto_next();
}
// added false to try something
if(false &amp;&amp; is_enemy_turn &amp;&amp; !ending_turn &amp;&amp; !turn_triggered) {
  // pretend to take a move
  turn_triggered = true;
  alarm[0] = TURN_MOVE_SPEED;
}</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if (live_call()) return live_result;
draw_set_font(f_card_text_bold);
draw_set_color(c_white);
draw_set_halign(fa_center);
draw_text(room_width/2, 65, "ENEMY 1: "+string(current_hp)+"/"+string(max_hp));
if(current_shield &gt; 0) {
  draw_set_color(c_blue);
  draw_text(room_width/2, 110, "SHIELD HP: "+string(current_shield));
}
if(poisoned) {
  draw_set_color(c_green);
  draw_text(room_width/2, 140, "POISONED");
}

if(debug_print) {
  draw_set_color(c_white);
  draw_text(room_width-300, 300, "TURN TRIGGERED: "+string(turn_triggered));
  draw_text(room_width-300, 330, "ENDING TURN: "+string(ending_turn));
}</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
